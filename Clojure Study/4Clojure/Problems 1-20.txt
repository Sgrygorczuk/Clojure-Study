http://www.4clojure.com/

Problem 1:
This is a clojure form. Enter a value which will make the form evaluate to true. Don't over think it! If you are confused, see the getting started page. Hint: true is equal to true.
test not run	
(= __ true)
^         ^ these define the full function, we are comparing two values saying true = true or (not false) = true  
   ^ this is the result of the function 
	^ this is the function you're using 

These are possible functions this could be written as 
(= true true)
(=(not false) true)

Problem 2: 
If you are not familiar with polish notation, simple arithmetic might seem confusing.
Note: Enter only enough to fill in the blank (in this case, a single number) - do not retype the whole problem.

(= (- 10 (* 2 3)) __)

You work your way out of the most inner () to the most outer, the function between two numbers is at the front 
So this breaks down to 10-2*3, you do 2*3 first and then you sub the result agiasnt 10. So the final anwser is 4.

(= (- 10 (* 2 3)) 4)

Problem 3:
Clojure strings are Java strings. This means that you can use any of the Java string methods on Clojure strings.
test not run	
(= ___ (.toUpperCase "hello world"))
    ^
So here we have to provide the output of this function "HELLO WORLD" giving us. 

(= "HELLO WORLD"(.toUpperCase "hello world"))

Problem 4:

Lists can be constructed with either a function or a quoted form.
test not run	
(= (list ___) '(:a :b :c))
	  ^
Here we need to define the list which can be told as a list (:a :b :c) or with a '(:a :b :c), vectors use [] and sets use #{}

(= (list :a :b :c) '(:a :b :c))

Problem 5:

When operating on a list, the conj function will return a new list with one or more items "added" to the front.

Note that there are two test cases, but you are expected to supply only one answer, which will cause all the tests to pass.

(= __ (conj '(2 3 4) 1))
(= __ (conj '(3 4) 2 1))
	^ means combine two things, here we're combining two lists 
	       ^ This is the list we are starting with
		     ^These are the things we're adding, we add items to the front left to right
Giving us 

(= '(1 2 3 4) (conj '(2 3 4) 1)) 

for both anwsers. So in the case of second function it adds in 2 to the front, then adds in 1 to the front. 

Problem 6:
Vectors can be constructed several ways. You can compare them with lists.

Note: the brackets [] surrounding the blanks __ are part of the test case.
	
(= [__] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))
	^	      ^ ^               ^  ^               ^
	List turned	Vector of a list   Vector defined normally
	to vector

(= [:a :b :c] (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c))
   So we just define them to do the same thing

Problem 7:
When operating on a Vector, the conj function will return a new vector with one or more items "added" to the end.
(= __ (conj [1 2 3] 4))
(= __ (conj [1 2] 3 4))

Vector conjuntion works in a way that it adds to the end of the vector unlike the list which adds to the front 

(= [1 2 3 4] (conj [1 2 3] 4))
(= [1 2 3 4] (conj [1 2] 3 4))

Problem 8:

Sets are collections of unique values.

(= __ (set '(:a :a :b :c :c :c :c :d :d)))          <- this list will be shrunk to only one unque value as it turns into a set
(= __ (clojure.set/union #{:a :b :c} #{:b :c :d}))  <- it is a combiantion that will get rid of the two :b

Sets don't have repeating values 

(= #{:a :b :c :d} (set '(:a :a :b :c :c :c :c :d :d)))          
(= #{:a :b :c :d} (clojure.set/union #{:a :b :c} #{:b :c :d}))
   ^ this hastag is needed to define a set #{} is a set 

Problem 9:
When operating on a set, the conj function returns a new set with one or more keys "added".

(= #{1 2 3 4} (conj #{1 4 3} __))

The conjustion addes whatever item in and the sorts it to fit with the rest of the set 

(= #{1 2 3 4} (conj #{1 4 3} 2))

Problem 10:

Maps store key-value pairs. Both maps and keywords can be used as lookup functions. Commas can be used to make maps more readable, but they are not required.

(= __ ((hash-map :a 10, :b 20, :c 30) :b))
(= __ (:b {:a 10, :b 20, :c 30}))

Hash maps connect two values together, here we are looking for the value assocaiated with :b which is 20

(= 20 ((hash-map :a 10, :b 20, :c 30) :b))
(= 20 (:b {:a 10, :b 20, :c 30}))

Problem 11:

When operating on a map, the conj function returns a new map with one or more key-value pairs "added".
(= {:a 1, :b 2, :c 3} (conj {:a 1} __ [:c 3]))

You can only add in [:b 2] vector items to the hash map -> conjoining to maps only take items as vectors of length exactly 2 (https://clojuredocs.org/clojure.core/conj)

(= {:a 1, :b 2, :c 3} (conj {:a 1} [:b 2] [:c 3]))

Problem 12: 

All Clojure collections support sequencing. You can operate on sequences with functions like first, second, and last.

(= __ (first '(3 2 1)))
(= __ (second [2 3 4]))
(= __ (last (list 1 2 3)))

Vectors and list have ability to connect to any point in the array 

(= 3 (first '(3 2 1)))
(= 3 (second [2 3 4]))
(= 3 (last (list 1 2 3)))

Problem 13:

The rest function will return all the items of a sequence except the first.
(= __ (rest [10 20 30 40]))

Pretty self explanitory [20 30 40]

(= [20 30 40] (rest [10 20 30 40]))

Problem 14:
Clojure has many different ways to create functions.
(= __ ((fn add-five [x] (+ x 5)) 3))   
	^ define function
	      ^ give name
		     ^ what we're workiing on
			   ^ add x to 5
				 ^ 3 is the input for x
(= __ ((fn [x] (+ x 5)) 3))        
	 ^ 
	define function 
	    ^ what variable we're working on
		 ^ add x + 5
			^ x = 3
(= __ (#(+ % 5) 3))	
	   ^ partial (% + 5)
       ^Defines a function (?)
		^ plug in 3
	
(= __ ((partial + 5) 3))
	 ^X 
	      ^ x + 5
		     ^ put 3 in x

So the function can be transleted to something like this in Java 

Java equivelent:
addFive(int x) {return x + 5;}
addFive(3);

(= 8 ((fn add-five [x] (+ x 5)) 3))
(= 8 ((fn [x] (+ x 5)) 3))
(= 8 (#(+ % 5) 3))
(= 8 ((partial + 5) 3))

Problem 15:
Write a function which doubles a number.

(= (__ 2) 4)	
(= (__ 3) 6)	
(= (__ 11) 22)
(= (__ 7) 14)

(fn doubleNumber[x] (* x 2)) <- I like this style the most 

Java equivelent:
doubleNumber(int x) {return 2 * x;}
doubleNumber(4);

(= ((fn double [x] (* x 2)) 2) 4)	
(= ((fn double [x] (* x 2)) 3) 6)	
(= ((fn double [x] (* x 2))11) 22)
(= ((fn double [x] (* x 2)) 7) 14)

Problem 16:

Write a function which returns a personalized greeting.
(= (__ "Dave") "Hello, Dave!")	
(= (__ "Jenn") "Hello, Jenn!")
(= (__ "Rhea") "Hello, Rhea!")

(fn addGreeting [name] (str(str "Hello, " name)"!"))
                              ^ Adds in a "Hello, " + passed in name
                         ^Adds in the "!" after the "Hello, Dave" has be made 

Java equivelent:
addGreeting (String name) {return "Hello, " + name +"!";}
addGreeting ("Dave");

(= ((fn addGreeting [name] (str(str "Hello, " name)"!")) "Dave") "Hello, Dave!")	
(= ((fn addGreeting [name] (str(str "Hello, " name)"!"))"Jenn") "Hello, Jenn!")
(= ((fn addGreeting [name] (str(str "Hello, " name)"!"))"Rhea") "Hello, Rhea!")

Problem 17:

The map function takes two arguments: a function (f) and a sequence (s). Map returns a new sequence consisting of the result of applying f to each item of s. Do not confuse the map function with the map data structure.
(= __ (map #(+ % 5) '(1 2 3)))
	^ This takes a function #(+ % 5) 
			^This is the list we past into it to run through the function
This will have us do the function on 1 2 3 giving us a list '(6, 7, 8)

Java equivelentish:
addFive (int[] numbers) {
	for(int number : numebrs){number + 5;}
	return numbers; 
}
addFive (int[]{6,7,8)});

(= '(6, 7, 8) (map #(+ % 5) '(1 2 3)))

Problem 18:

The filter function takes two arguments: a predicate function (f) and a sequence (s). Filter returns a new sequence consisting of all the items of s for which (f item) returns true.	
(= __ (filter #(> % 5) '(3 4 5 6 7)))
		  ^This function gives boolean if the passed in % is bigger than 5
	^This then says to keep only when boolean is true 

Then the result should be '(6 7)

Java equivelentish:
filterBelowFive (Vector<int> numbers) {
	for(int number : numbers{if(number < 5) {numbers.remove(number);}}
	return numbers; 
}

(= '(6 7) (filter #(> % 5) '(3 4 5 6 7)))

Problem 19:

Write a function which returns the last element in a sequence.
(= (__ [1 2 3 4 5]) 5)
(= (__ '(5 4 3)) 3)
(= (__ ["b" "c" "d"]) "d")


(fn getLast[x](get (into [] x) (- (count x) 1)))
		        ^ This function makes the passes in sequecne into a vector, regardless of if it was one to start with or not
					^ This function get the size - 1 of the vector so we can get the postion of the last variable 
                ^ gets the items based on the given postion 

Java equivelentish:
filterBelowFive (Vector<int> numbers) {
	//Turn the list into a vector, or keep the vector a vector 
	return numbers[numbers.size -1); 
}

(= ((fn getLast[x](get (into [] x) (- (count x) 1))) [1 2 3 4 5]) 5)
(= ((fn getLast[x](get (into [] x) (- (count x) 1))) '(5 4 3)) 3)
(= ((fn getLast[x](get (into [] x) (- (count x) 1))) ["b" "c" "d"]) "d")

Problem 20:

Write a function which returns the second to last element from a sequence.

(= (__ (list 1 2 3 4 5)) 4)	
(= (__ ["a" "b" "c"]) "b")
(= (__ [[1 2] [3 4]]) [1 2])

This is pretty much the same but changed the offset from the size from size - 1 to size - 2

(fn getSecondToLast[x](get (into [] x) (- (count x) 2)))

(= ((fn getSecondToLast[x](get (into [] x) (- (count x) 2)))(list 1 2 3 4 5)) 4)	
(= ((fn getSecondToLast[x](get (into [] x) (- (count x) 2))) ["a" "b" "c"]) "b")
(= ((fn getSecondToLast[x](get (into [] x) (- (count x) 2))) [[1 2] [3 4]]) [1 2])
